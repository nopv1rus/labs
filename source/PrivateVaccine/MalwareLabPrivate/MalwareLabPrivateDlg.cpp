// MalwareLabPrivateDlg.cpp : 구현 파일
//

#include "stdafx.h"
#include "MalwareLabPrivate.h"
#include "MalwareLabPrivateDlg.h"
#include "HashScan.h"
#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 응용 프로그램 정보에 사용되는 CAboutDlg 대화 상자입니다.

class CAboutDlg : public CDialog
{
public:
	CAboutDlg();

// 대화 상자 데이터입니다.
	enum { IDD = IDD_ABOUTBOX };
	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 지원입니다.

// 구현입니다.
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)
END_MESSAGE_MAP()


// CMalwareLabPrivateDlg 대화 상자




CMalwareLabPrivateDlg::CMalwareLabPrivateDlg(CWnd* pParent /*=NULL*/)
	: CDialog(CMalwareLabPrivateDlg::IDD, pParent)
	, m_InputScanDir(_T(""))
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CMalwareLabPrivateDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	DDX_Text(pDX, IDC_EDIT1, m_InputScanDir);
	DDX_Control(pDX, IDC_ScanCount, m_ScanCount);
	DDX_Control(pDX, IDC_DetectCount, m_DetectCount);
	DDX_Control(pDX, IDC_CureCount, m_CureCount);
	DDX_Control(pDX, IDC_LIST2, m_ListResult);
	DDX_Text(pDX, IDC_TIME, m_Time);
}

BEGIN_MESSAGE_MAP(CMalwareLabPrivateDlg, CDialog)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	//}}AFX_MSG_MAP
	ON_WM_CTLCOLOR()
	ON_BN_CLICKED(IDC_OPENDIR, &CMalwareLabPrivateDlg::OnBnClickedOpendir)
	ON_BN_CLICKED(ID_SCANSTART, &CMalwareLabPrivateDlg::OnBnClickedScanstart)
	ON_BN_CLICKED(ID_STOP, &CMalwareLabPrivateDlg::OnBnClickedStop)
	ON_BN_CLICKED(ID_EXIT, &CMalwareLabPrivateDlg::OnBnClickedExit)
	ON_WM_TIMER()
END_MESSAGE_MAP()


// CMalwareLabPrivateDlg 메시지 처리기

BOOL CMalwareLabPrivateDlg::OnInitDialog()
{
	WCHAR	wszDate[MAX_PATH] = {0,};
	WCHAR	wszTitle[MAX_PATH] = {0,};
	WCHAR	wszMainTitle[MAX_PATH] = {0,};
	WCHAR	wszDefaltScanDir[MAX_PATH] = {0,};

	CDialog::OnInitDialog();

	// 시스템 메뉴에 "정보..." 메뉴 항목을 추가합니다.

	// IDM_ABOUTBOX는 시스템 명령 범위에 있어야 합니다.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		CString strAboutMenu;
		strAboutMenu.LoadString(IDS_ABOUTBOX);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 이 대화 상자의 아이콘을 설정합니다. 응용 프로그램의 주 창이 대화 상자가 아닐 경우에는
	//  프레임워크가 이 작업을 자동으로 수행합니다.
	SetIcon(m_hIcon, TRUE);			// 큰 아이콘을 설정합니다.
	SetIcon(m_hIcon, FALSE);		// 작은 아이콘을 설정합니다.

	// TODO: 여기에 추가 초기화 작업을 추가합니다.

	//배경 하얀색으로 해주기 위해
	m_brBrush.CreateSolidBrush(RGB(255, 255, 255));

	//스캔시작 관련된 버튼 활성
	GetDlgItem(ID_SCANSTART)->EnableWindow(TRUE);
	GetDlgItem(ID_STOP)->EnableWindow(FALSE);
	GetDlgItem(ID_EXIT)->EnableWindow(TRUE);

	GetPrivateProfileStringW( L"INFO", L"TITLE", NULL, wszTitle, MAX_PATH-1 , L".\\MalwareLab.ini");
	GetPrivateProfileStringW( L"INFO", L"DATE", NULL, wszDate, MAX_PATH-1 , L".\\MalwareLab.ini" );

	if(wcslen(wszTitle) == 0 || wcslen(wszDate) == 0)
		return FALSE;

	_snwprintf(wszMainTitle, MAX_PATH-1, L"%s      %s", wszDate, wszTitle);

	AfxGetMainWnd()->SetWindowTextW(wszMainTitle);

	InitInformation();

	DWORD dwStyle = m_ListResult.GetExtendedStyle();

	dwStyle |= LVS_EX_FULLROWSELECT| LVS_EX_SUBITEMIMAGES; // | LVS_EX_CHECKBOXES;//| LVS_EX_FLATSB;
	m_ListResult.SetExtendedStyle(dwStyle);

	WCHAR *strCol[] = {L"진단 경로",L"탐지명", L"상태" };
		int	 nCol[] = { 280, 200, 128 };

	LVCOLUMN	lvcolumn;


	for(int i = 0; i < 3; i++)
	{
		lvcolumn.mask = LVCF_FMT | LVCF_SUBITEM | LVCF_TEXT | LVCF_WIDTH;
		lvcolumn.fmt = LVCFMT_LEFT;									// 정렬 정보

		lvcolumn.pszText = strCol[i];	// 제목 항
		lvcolumn.iSubItem = i;											// column 번호

		lvcolumn.cx = nCol[i];

		m_ListResult.InsertColumn(i, &lvcolumn);
	}
/*
	for(int i = 0; i < 3; i++)
	{
		m_ListResult.InsertColumn(i,strCol[i], LVCFMT_LEFT, 100, -1);
	}
	*/
	enable_privilege(SE_DEBUG_NAME);

	m_nScanStop = FALSE;


	if(GetSpecialFolderPathW(wszDefaltScanDir) == FALSE)
		GetEnvironmentVariableW(L"WINDIR", wszDefaltScanDir, MAX_PATH);
	
	if(wcslen(wszDefaltScanDir) != 0)
		m_InputScanDir.Format(L"%s", wszDefaltScanDir);

	UpdateData(FALSE);

	return TRUE;  // 포커스를 컨트롤에 설정하지 않으면 TRUE를 반환합니다.
}



void CMalwareLabPrivateDlg::OnTimer(UINT_PTR nEvent)
{	
	time_t  tEndtime = 0;
	DOUBLE	dwLabtime = 0;

	DWORD	Hour = 0;
	DWORD	Min = 0;
	DWORD	Sec = 0;

	switch(nEvent)
	{
	case 100:
		if (m_nScanStop == FALSE)
		{
			tEndtime = time(&tEndtime);

			dwLabtime = tEndtime - m_tStartTime;

			Hour = dwLabtime / 3600;
			dwLabtime = (int)dwLabtime % 3600;

			Min = dwLabtime / 60;
			dwLabtime = (int)dwLabtime % 60;

			Sec = dwLabtime;

			m_Time.Format(L"%02d:%02d:%02d", Hour, Min, Sec);

			UpdateData(FALSE);							
		}
		break;	
	}
	CDialog::OnTimer(nEvent);

}



BOOL CMalwareLabPrivateDlg::GetSpecialFolderPathW(WCHAR *pwszBuff)
{
#define SHELL32_DLL_NAME_W	L"shell32.dll"
	BOOL	bRet = FALSE;
	WCHAR	szAPPDataPath[MAX_PATH] = {0,};
	HMODULE	hShell32 = NULL;
	typedef BOOL (WINAPI* PFN_SHGETSPECIALFOLDERPATH)(HWND, LPWSTR, int, BOOL);

	PFN_SHGETSPECIALFOLDERPATH pfnGetSpecialFolderPath = NULL;

	// 공통 계정의 APPD6ATA 폴더를 얻어온다. 사용자 계정별로 할 경우 다수의 계정이 존재하는 OS에서 각각 Cache가 생성 되게 됨.
	// XP - C:\Documents and Settings\All Users\Application Data\Hauri\Common
	// 7 - C:\ProgramData\Hauri\Common

	hShell32 = LoadLibraryW(SHELL32_DLL_NAME_W);
	if(hShell32 == NULL)
		return FALSE;

	pfnGetSpecialFolderPath = (PFN_SHGETSPECIALFOLDERPATH)GetProcAddress(hShell32, "SHGetSpecialFolderPathW");
	if(pfnGetSpecialFolderPath == NULL)
		goto COMM_RETN;

	if(pfnGetSpecialFolderPath(NULL, szAPPDataPath, CSIDL_LOCAL_APPDATA, FALSE) == FALSE)
		goto COMM_RETN;

	_snwprintf(pwszBuff, MAX_PATH-1, L"%s", szAPPDataPath);

	bRet = TRUE;

COMM_RETN:
	return bRet;
}


BOOL CMalwareLabPrivateDlg::enable_token_privilege(HANDLE htok, 
												LPCTSTR szPrivilege, TOKEN_PRIVILEGES *tpOld)
{
	TOKEN_PRIVILEGES tp;
	tp.PrivilegeCount = 1;
	tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;

	if (LookupPrivilegeValue(0, szPrivilege, &tp.Privileges[0].Luid))
	{
		DWORD cbOld = sizeof (*tpOld);

		if (AdjustTokenPrivileges(htok, FALSE, &tp, cbOld, tpOld, &cbOld))
		{////
			return (ERROR_NOT_ALL_ASSIGNED != GetLastError());
		}
		else
		{
			return (FALSE);
		}
	}
	else
	{
		return (FALSE);
	}
}


BOOL CMalwareLabPrivateDlg::enable_privilege(LPCTSTR szPrivilege)	// 시스템 권한.
{
	BOOL bReturn = FALSE;
	HANDLE hToken;
	TOKEN_PRIVILEGES tpOld;

	if (!OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY | TOKEN_ADJUST_PRIVILEGES, &hToken))
	{
		return(FALSE);
	}

	bReturn = (enable_token_privilege(hToken, szPrivilege, &tpOld));
	CloseHandle(hToken);

	return (bReturn);
}

void CMalwareLabPrivateDlg::InitInformation()
{
	m_iScanCount = 0;
	m_iDetectCount = 0;
	m_iCureCount = 0;

	ZeroMemory(&m_tStartTime, sizeof(m_tStartTime));

	m_ScanCount.SetWindowText( L"0" );
	m_CureCount.SetWindowText( L"0" );
	m_DetectCount.SetWindowText( L"0" );

	m_ListResult.DeleteAllItems();

	UpdateData(FALSE);
}


void CMalwareLabPrivateDlg::ResultAddItem(int nItem, int nSubItem, CString strItemColumn, int nImage, int nState, int nParam)
{
	//기본값 설정 
	//bOverWrite = FALSE;
	//nImage = -1;
	LVITEM	lvitem = {0,};		
	lvitem.iItem	= nItem;
	lvitem.iSubItem	= nSubItem;	
	lvitem.mask		= LVIF_TEXT|LVIF_PARAM;
	lvitem.pszText	= (LPTSTR)(LPCTSTR)strItemColumn;
	lvitem.lParam	= nParam;

	if( nSubItem == 0 )
	{
		m_ListResult.InsertItem(&lvitem);
	}
	else
	{
		m_ListResult.SetItemText( nItem, nSubItem, (LPTSTR)(LPCTSTR)strItemColumn );
	}

	m_ListResult.SetHotItem(nItem);
}


void CMalwareLabPrivateDlg::IncraseCount(DWORD dwType)
{
	CStringW szTranse;

	switch (dwType)
	{
	case SCANCOUNT:
		m_iScanCount++;
		szTranse.Format(L"%d", m_iScanCount);
		m_ScanCount.SetWindowText(szTranse);
		break;
	case DETECTCOUNT:
		m_iDetectCount++;
		szTranse.Format(L"%d", m_iDetectCount);
		m_DetectCount.SetWindowText(szTranse);
		break;
	case CURECOUNT:
		m_iCureCount++;
		szTranse.Format(L"%d", m_iCureCount);
		m_CureCount.SetWindowText(szTranse);
		break;
	default:
		break;
	}
}

void CMalwareLabPrivateDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialog::OnSysCommand(nID, lParam);
	}
}

// 대화 상자에 최소화 단추를 추가할 경우 아이콘을 그리려면
//  아래 코드가 필요합니다. 문서/뷰 모델을 사용하는 MFC 응용 프로그램의 경우에는
//  프레임워크에서 이 작업을 자동으로 수행합니다.

void CMalwareLabPrivateDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 그리기를 위한 디바이스 컨텍스트

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 클라이언트 사각형에서 아이콘을 가운데에 맞춥니다.
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 아이콘을 그립니다.
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialog::OnPaint();
	}
}

// 사용자가 최소화된 창을 끄는 동안에 커서가 표시되도록 시스템에서
//  이 함수를 호출합니다.
HCURSOR CMalwareLabPrivateDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}


HBRUSH CMalwareLabPrivateDlg::OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor)
{
	HBRUSH hbr = CDialog::OnCtlColor(pDC, pWnd, nCtlColor);

	
	// TODO:  여기서 DC의 특성을 변경합니다.

	switch(nCtlColor)
	{
	case CTLCOLOR_EDIT:
	case CTLCOLOR_LISTBOX:        
	case CTLCOLOR_BTN:            
	case CTLCOLOR_DLG:            
	case CTLCOLOR_SCROLLBAR:      
	case CTLCOLOR_STATIC:         
	case CTLCOLOR_MAX:            
		{
			pDC->SetTextColor(RGB(0, 0, 0));
			pDC->SetBkColor(RGB(255, 255, 255));
			pDC->SetBkMode(TRANSPARENT);
			return m_brBrush;
		}
	}
	if (
		pWnd->GetDlgCtrlID() == IDC_DIR ||
		pWnd->GetDlgCtrlID() == IDC_FILE ||
		pWnd->GetDlgCtrlID() == IDC_DIR1 ||
		pWnd->GetDlgCtrlID() == IDC_FILE1
		)
	{
		pDC->SetTextColor(RGB(0, 0, 0));
		pDC->SetBkColor(RGB(255, 255, 255));
	}


	// TODO:  기본값이 적당하지 않으면 다른 브러시를 반환합니다.
	return hbr;
}

void CMalwareLabPrivateDlg::OnBnClickedOpendir()
{
	ITEMIDLIST*  pildBrowse;
	TCHAR   pszPathname[MAX_PATH] = { 0,};
	BROWSEINFO  bInfo;
	memset(&bInfo, 0, sizeof(bInfo));

	UpdateData(TRUE);

	bInfo.hwndOwner   = GetSafeHwnd();
	bInfo.pidlRoot   = NULL;
	bInfo.pszDisplayName = pszPathname;
	bInfo.lpszTitle   = _T("디렉토리를 선택하세요");
	bInfo.ulFlags   = BIF_RETURNONLYFSDIRS | BIF_USENEWUI | BIF_EDITBOX | BIF_STATUSTEXT ;  
	bInfo.lpfn    = NULL;
	bInfo.lParam  = (LPARAM)(LPCTSTR)"C:\\";
	bInfo.lParam  = (LPARAM)NULL;
	pildBrowse    = ::SHBrowseForFolder(&bInfo);
	if(pildBrowse)
	{
		SHGetPathFromIDListW(pildBrowse, pszPathname);
		//m_strDownloadPath.Format("%s", pszPathname);
		m_InputScanDir = pszPathname;
		UpdateData(FALSE);
	}
}

void CMalwareLabPrivateDlg::ScanningButtonEnable()
{
	//스캔시작 관련된 버튼 활성
	m_nScanStop = FALSE;

	GetDlgItem(IDC_EDIT1)->EnableWindow(FALSE);

	
	GetDlgItem(IDC_OPENDIR)->EnableWindow(FALSE);
	GetDlgItem(ID_SCANSTART)->EnableWindow(FALSE);
	GetDlgItem(ID_STOP)->EnableWindow(TRUE);
	GetDlgItem(ID_EXIT)->EnableWindow(FALSE);
}

void CMalwareLabPrivateDlg::ScanningButtonDisable()
{
	//스캔시작 관련된 버튼 활성

	m_nScanStop = TRUE;

	GetDlgItem(IDC_EDIT1)->EnableWindow(TRUE);

	GetDlgItem(IDC_OPENDIR)->EnableWindow(TRUE);
	GetDlgItem(ID_SCANSTART)->EnableWindow(TRUE);
	GetDlgItem(ID_STOP)->EnableWindow(FALSE);
	GetDlgItem(ID_EXIT)->EnableWindow(TRUE);
}

void CMalwareLabPrivateDlg::OnBnClickedScanstart()
{
	UpdateData(TRUE);

	if( m_InputScanDir.GetLength() == 0 )
		MessageBoxW(L"검사 경로를 확인해주시기 바랍니다.", NULL, MB_OK);	
	else
	{
		InitInformation();
		ScanningButtonEnable();

		m_Thread = ::AfxBeginThread(MainScannerFun ,this);
		if (m_Thread == NULL)
			MessageBoxW(L"전용백신을 다시 실행해주시기 바랍니다.", NULL, MB_OK);	
	}
}

void CMalwareLabPrivateDlg::OnBnClickedStop()
{
	ScanningButtonDisable();
}

void CMalwareLabPrivateDlg::OnBnClickedExit()
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	OnCancel();
	OnDestroy();
}

INT CMalwareLabPrivateDlg::EnumFile(CStringW csFile)
{
	INT		nRet = 0;

	BOOL	bRet = FALSE;

	INT		nLength = 0;

	CStringW	csDirectory;
	CStringW	csScanFile;

	CFileFind	ff;

	csScanFile = csFile;
	csDirectory = csFile;

	nLength = csScanFile.GetLength();
	if(nLength <= 0)
		goto COMM_RTN;

	if( csScanFile.GetAt(nLength-1) == '\\' )
		csScanFile += "*.*";
	else
		csScanFile += "\\*.*";

	//파일 탐색 중에 정지 버튼을 눌렀다면 멈쳐야함...
	if (m_nScanStop == TRUE)
		return 0;

	bRet = ff.FindFile(csScanFile);

	//디렉토리 경로가 아니라면 실패함. 디렉토리 접근권한이 없어도 실패
	if (bRet == FALSE)
	{
		//파일인 경우 스캔해줌~
		DWORD  dwAttr = GetFileAttributesW(csFile.GetBuffer(0));
		if ((dwAttr & FILE_ATTRIBUTE_ARCHIVE) == FILE_ATTRIBUTE_ARCHIVE &&
			(dwAttr & FILE_ATTRIBUTE_DIRECTORY) != FILE_ATTRIBUTE_DIRECTORY )
		{
			ScanFile(csFile.GetBuffer(0));
		}		

		goto COMM_RTN;
	}

	SetDlgItemText(IDC_DIR, csDirectory);

	while(bRet)
	{		
		bRet = ff.FindNextFile();

		if (m_nScanStop == TRUE)
			break;

		if (ff.IsDots()) 
			continue;

		if (ff.IsDirectory())
		{
			EnumFile(ff.GetFilePath());
			continue;	
		}
		
		SetDlgItemText(IDC_FILE, ff.GetFileName());

		nRet++;
		csScanFile = ff.GetFilePath();
		if (csScanFile.GetString() == NULL)
			break;
		
		IncraseCount(SCANCOUNT);
		ScanFile(csScanFile.GetBuffer(0));
	}

COMM_RTN:
	
	return nRet;
}


UINT CMalwareLabPrivateDlg::MainScannerFun(LPVOID pParam)
{
	CMalwareLabPrivateDlg *pDlg = (CMalwareLabPrivateDlg *)pParam;

//	pDlg->UpdateData(TRUE);

	pDlg->m_Time.Format(L"%02d:%02d:%02d", 0, 0, 0);
	pDlg->m_tStartTime = time(&pDlg->m_tStartTime);
	pDlg->SetTimer(100, 100, NULL);

	pDlg->EnumFile(pDlg->m_InputScanDir);
	
	pDlg->m_nScanStop = TRUE;

	AfxMessageBox(L"파일 탐색 완료되었습니다", MB_OK|MB_ICONINFORMATION);
 
	pDlg->ScanningButtonDisable();

	return 0;
}


INT CMalwareLabPrivateDlg::ScanFile(WCHAR *pwszTarget)
{
	DWORD		dwResult = 0;
	DWORD		dwRet = 0;

	CStringW	wState ;

	ST_SCAN_INFO stStIf = {0,};

	HashEngine ScanningEng;

	if (pwszTarget == NULL)
	{
		return FALSE;
	}

	if( ScanningEng.GetFileInfo(pwszTarget, &stStIf) == FALSE )
		goto COMM_END;

	dwRet = ScanningEng.ScanHashEng(&stStIf);
	if(dwRet == FALSE)
		goto COMM_END;

	IncraseCount(DETECTCOUNT);

	int nItem = m_ListResult.GetItemCount();
	ResultAddItem(nItem, 0 , pwszTarget, 0, 0, 0);
	ResultAddItem(nItem, 1, stStIf.pwszInfectName, 0, 0, 0);

	dwRet = ScanningEng.CureHashEng(&stStIf);
	switch(dwRet)
	{
		case CURE_FAILED:
			wState = L"치료실패";
			break;
		case CURE_SUCCESS:
			wState = L"치료성공";
			IncraseCount(CURECOUNT);
			break;
		case CURE_REBOOT:
			wState = L"재부팅 후 치료";
			IncraseCount(CURECOUNT);
			break;
		case DELETE_SUCCESS:
			wState = L"삭제성공";
			IncraseCount(CURECOUNT);
			break;
		case DELETE_FAILED:
			wState = L"삭제실패";
			break;
		case DELETE_REBOOT:
			wState = L"재부팅 후 삭제";
			break;
	default:
		break;
	}

	ResultAddItem(nItem, 2, wState, 0, 0, 0);

COMM_END:

	ScanningEng.Closefile(&stStIf);

	return 0;
}