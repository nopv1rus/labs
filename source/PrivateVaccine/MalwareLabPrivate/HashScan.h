#include "stdafx.h"
#include <Windows.h>
#include <stdio.h>

#define ONLYREAD 1
#define READWRITE 2

enum CureCode
{
	CURE_FAILED = 0,
	CURE_SUCCESS,
	CURE_REBOOT,
	DELETE_SUCCESS,
	DELETE_FAILED,
	DELETE_REBOOT,
};


typedef struct _stFileInfo
{
	WCHAR	*pwszFileFullPath;
	HANDLE	 hFile;
	HANDLE	 hFileMapping;
	DWORD	 dwFSize;
	BYTE	*pbyFileBuff;
	DWORD	 dwOpenmode;
}ST_FILE_INFO,*PST_FILE_INFO;

typedef struct _stScanInfo
{
	DWORD  dwStatus;
	DWORD  dwInfecEngineID;
	WCHAR  pwszInfectName[0x50];
	PVOID  pPrivateCureLogic;	
	ST_FILE_INFO stFileInfo;

}ST_SCAN_INFO,*PST_SCAN_INFO;



typedef struct
{
	WCHAR *pwszInfectName;
	BYTE pHash[17];
	DWORD dwSize;
	PVOID pCureLogic;
}MND_HASH_MD5,*PMND_HASH_MD5;


class HashEngine
{

private:


public:
	BOOL m_EnableEng;
	INT	m_PatternSize;

	HashEngine();
	~HashEngine();

	BOOL HashEngine::CureProcessForPrepare(WCHAR *wszTarget);
	BOOL HashEngine::IsCompareModuelePath(DWORD dwPid, WCHAR *wszTarget);
	VOID HashEngine::ResetInfo (IN PST_SCAN_INFO pDestObject);
	VOID HashEngine::Closefile (IN PST_SCAN_INFO pDestObject);
	BOOL HashEngine::Openfile(PST_SCAN_INFO pDestObject, DWORD dwOpenmode);
	BOOL HashEngine::GetFileInfo(WCHAR *pwszFile, IN PST_SCAN_INFO pDestObject);
	BOOL HashEngine::ScanHashEng(PST_SCAN_INFO pDestObject);
	DWORD HashEngine::CureHashEng(PST_SCAN_INFO pDestObject);
	BOOL HashEngine::GetHashMd5(HANDLE hFile, DWORD dwFsize, BYTE *pMd5Str, DWORD dwBuffSize );
	BOOL HashEngine::CureProcess(WCHAR *wszTarget);
};

